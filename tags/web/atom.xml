
<!DOCTYPE HTML>

<html>

<head>
	<meta charset="utf-8">
	<title>标签: web - 一个PHPer的博客</title>
	<meta name="author" content="Gavin Jx">

	
	<meta name="description" content="标签: web">
	

  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

	<link href="" rel="alternate" title="一个PHPer的博客" type="application/atom+xml">
	
	<link rel="canonical" href="http://www.17yuea.com//tags/web/atom.xml">
	<link href="/favicon.png" rel="shortcut icon">
	<link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
	<link href="/stylesheets/font-awesome.min.css" media="screen, projection" rel="stylesheet" type="text/css">
	<link href="/stylesheets/customer.css" media="screen, projection" rel="stylesheet" type="text/css">
	<!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
	<!-- <link href='http://fonts.googleapis.com/css?family=Nunito:400,300,700' rel='stylesheet' type='text/css'> -->
	<link href='/stylesheets/font-nunito.css' rel='stylesheet' type='text/css'>
	<!-- <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script> -->
	<script src="/javascripts/jquery-1.7.2.min.js"></script>
	
  

</head>


<body>
	<div class="container">
		<div class="left-col">
			<div class="intrude-less">
			<header id="header" class="inner"><div class="profilepic">
	<img src="/images/profile.png" alt="Profile Picture" style="width: 160px;" />
	<!-- 
	<script src="/javascripts/md5.js"></script>
	<script type="text/javascript">
		$(function(){
			$('.profilepic').append("<img src='http://www.gravatar.com/avatar/" + MD5("guojianxiang@17yuea.com") + "?s=160' alt='Profile Picture' style='width: 160px;' />");
		});
	</script>
	 -->
</div>

<nav id="main-nav"><ul class="main">
    <li><a href="/">首页</a></li>
    <li><a href="/archives">文章</a></li>
    <li><a href="/tags">标签</a></li>
    <li><a href="/about">关于我</a></li>
</ul>
</nav>
<nav id="sub-nav">
	<div class="social">
		
			<a class="email" href="mailto:guojianxiang@17yuea.com" title="Email">Email</a>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
    	
    	
    	<!--  -->
	</div>
	
</nav>
</header>				
			</div>
		</div>	
		<div class="mid-col">
			
				
			
			<div class="mid-col-container">
				<div id="content" class="inner"><?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[标签: web | 一个PHPer的博客]]></title>
  <link href="http://www.17yuea.com//tags/web/atom.xml" rel="self"/>
  <link href="http://www.17yuea.com//"/>
  <updated>2015-09-16T00:36:36+08:00</updated>
  <id>http://www.17yuea.com//</id>
  <author>
    <name><![CDATA[Gavin Jx]]></name>
    <email><![CDATA[guojianxiang@17yuea.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[不同系统间的账户登录-Cookie跨域]]></title>
    <link href="http://www.17yuea.com//web/php/2015/09/15/Diff_System_Account_Sync/"/>
    <updated>2015-09-15T23:30:00+08:00</updated>
    <id>http://www.17yuea.com//web/php/2015/09/15/Diff_System_Account_Sync</id>
    <content type="html"><![CDATA[<blockquote><p>这两天在做：让两个系统间的帐号同步，其中涉及到跨域登录.</p></blockquote>

<!-- more -->


<p>背景是这样的：现在有两个系统SystemA和SystemB，要求在SystemA里可以注册SystemB的帐号，同时注册SystemB的时候需要依赖一个新的SystemA的帐号，并且要求在登录SystemB的时候同时登录SystemA的新帐号，并且在同一个浏览器内可以同时登录SystemA的初始帐号SA，SystemB的帐号SB和SystemA的新帐号SAN.</p>

<p>系统SystemA和SystemB都是采用Cookie记录登录操作的. 因此需要同时有SA, SB, SAN三者的Cookie.</p>

<p>解决方案是：使用三个域名（<code>abc.com</code>, <code>sb.abc.com</code>, <code>newsa.abc.com</code>）,其中SA访问<code>abc.com</code>进行登录, SAN访问<code>newsa.abc.com</code>进行登录, SB访问<code>sb.abc.com</code>进行登录. 其中<code>abc.com</code>和<code>newsa.abc.com</code>都指向SystemA, <code>sb.abc.com</code>指向SystemB. 这样SA登录的时候使用域<code>abc.com</code>的Cookie, SAN登录的时候使用<code>newsa.abc.com</code>的Cookie, SB登录的时候使用<code>sb.abc.com</code>的Cookie.</p>

<ul>
<li>跨域登录：其实很简单，首先使用SA登录<code>abc.com</code>，这时候已经种植了<code>abc.com</code>的Cookie, 然后用SB登录SystemB成功后种植了<code>sb.abc.com</code>的Cookie, 登录SystemB的时候动态生成一个script，该script的src指向<code>newsa.abc.com</code>的一个URL，该URL负责种植域<code>newsa.abc.com</code>下的Cookie（也就是采用动态载入异域的script解决跨域）.</li>
</ul>


<p>在<code>sb.abc.com</code>的登录页面ajax验证登录成功后执行下面的代码，动态引入<code>newsa.abc.com</code>的一个URL作为dom-script.</p>

<blockquote><p>你可能会问为什么不在<code>sb.abc.com</code>直接种植<code>newsa.abc.com</code>下的Cookie呢？</p>

<p>因为种不了，这属于跨域了. sb.abc.com可以种植sb.abc.com和abc.com下的Cookie, 无法在同级别的二级域名下种植Cookie.</p></blockquote>

<pre><code class="javascript">function loadScript(url, callback, callbackData){ 
    var script = document.createElement("script") 
    script.type = "text/javascript"; 
    if (script.readyState){ //IE 
        script.onreadystatechange = function(){ 
            if (script.readyState == "loaded" || 
                script.readyState == "complete"){ 
                script.onreadystatechange = null; 
                callback(callbackData); 
            } 
        }; 
    } else { //Others: Firefox, Safari, Chrome, and Opera 
        script.onload = function(){ 
            callback(callbackData);     
        }; 
    } 
    script.src = url; 
    document.body.appendChild(script); 
} 

loadScript('http://newsa.abc.com/project/setcookie', callback, callbackData) ;
</code></pre>

<p>嗯，还支持简单的回调 ~</p>

<ul>
<li>父域和子域Cookie的发送优先级</li>
</ul>


<p>没错，通过上面的异步引入<code>newsa.abc.com</code>一个种植Cookie的URL我们可以成功种植Cookie.</p>

<p>But, 当我们访问<code>newsa.abc.com</code>的时候发现浏览器在Header里发送的不是 <code>newsa.abc.com</code>的Cookie, 而是<code>abc.com</code>的Cookie. 即当父域和子域的Cookie同时存在时访问子域的URL，浏览器会优先发送父域的Cookie.</p>

<p>我们翻阅下种植Cookie的方法：</p>

<pre><code class="php">bool setcookie ( string $name [, string $value [, int $expire = 0 [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]]]] )
</code></pre>

<p><code>path</code> 就是我们解决问题的关键，由于项目正好不是在域名下的<code>'/'根目录</code>，所以对于子域的Cookie, 我们种植到项目目录下，父域的Cookie还是种植到<code>'/'根目录</code>, 假设项目目录为：<code>/project</code>，当访问<code>abc.com/project</code>下的URI时，发送的是<code>abc.com</code>的Cookie, 访问<code>newsa.abc.com/project</code>的URI时，发送的是<code>newsa.abc.com</code>的Cookie（因为我们设置了newsa.abc.com的Cookie的path，所以优先发送. ）</p>

<p>当然我们完全可以将<code>newsa.abc.com</code>替换成<code>def.com</code>，这样就不涉及子域，父域的Cookie共享问题了，但是我们有自己的业务考虑，使用<code>newsa.abc.com</code>对用户来说更能体现我们业务的紧密型.</p>

<p><br></p>

<p>总结下Cookie的跨域共享：</p>

<ol>
<li>在可读取的path下子域可以共享父域的Cookie，同时如果二者都存在，优先使用匹配当前path的Cookie.</li>
<li>不同的子域之间不能种植Cookie.</li>
<li>子域可以种植父域的Cookie.</li>
<li>父域不可以种植子域的Cookie.</li>
<li>父域不可以共享子域的Cookie.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 HttpStatus 200（From Cache）和 304（Not Modified）的探索]]></title>
    <link href="http://www.17yuea.com//web/2015/09/01/%E5%85%B3%E4%BA%8E%20HttpStatus%20200%EF%BC%88From%20Cache%EF%BC%89%E5%92%8C%20304%EF%BC%88Not%20Modified%EF%BC%89%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <updated>2015-09-01T23:00:00+08:00</updated>
    <id>http://www.17yuea.com//web/2015/09/01/关于 HttpStatus 200（From Cache）和 304（Not Modified）的探索</id>
    <content type="html"><![CDATA[<p>今晚走了很长时间的弯路，最后发现问题在于 <strong>url load 访问</strong> 和 <strong>Command+R</strong> 刷新上，道路曲折但是很有意思。</p>

<blockquote><p>问题的起源在于晚上把一个demo部署到阿里云上，在配置nginx的时候，设置了expire。但是当用Chrome检查Network的时候，发现已经设置了expire的css，js，image 总是返回304（Not Modified）的状态。因为之前服务器缓存资源出现返回304的问题，所以就打算看下到底是什么问题</p></blockquote>

<!-- more -->


<p>首先，我断定自己的expire是没有设置错的：</p>

<pre><code class="nginx">    location ~ .*.(css|js)$ {
        expires 30d;
        break;
    }
</code></pre>

<p>于是开始查看是否是ETag的配置问题？</p>

<ul>
<li>弯路1：nginx自从1.3版本后默认带有etag，木有发现，然后去github下载第三方ETag插件编译。。。 1.3版本后可以通过设置 etag on|off实现 etag 的配置，并且默认开启etag.</li>
</ul>


<p>Web服务器我们以nginx为例，以css文件为例，ETag可以理解为一个文件的标记，是唯一的.</p>

<p>ETag的工作原理是：</p>

<ul>
<li>第一次访问， nginx会返回ETag值，浏览器会记录下来</li>
</ul>


<p>Request</p>

<pre><code class="http">    Accept:text/css,*/*;q=0.1
    Accept-Encoding:gzip, deflate, sdch
    Accept-Language:zh-CN,zh;q=0.8,en;q=0.6
    Cache-Control:no-cache
    Connection:keep-alive
    Host:123.57.161.203:81
    Pragma:no-cache
    Referer:http://123.57.161.203:81/
    User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.6 Safari/537.36
    X-FirePHP-Version:0.0.6
</code></pre>

<p>Response</p>

<pre><code class="http">    Status Code:200 OK

    Accept-Ranges:bytes
    Cache-Control:max-age=2592000
    Connection:keep-alive
    Content-Length:32628
    Content-Type:text/css
    Date:Tue, 01 Sep 2015 14:06:27 GMT
    ETag:"55e57588-7f74"
    Expires:Thu, 01 Oct 2015 14:06:27 GMT
    Last-Modified:Tue, 01 Sep 2015 09:53:12 GMT
    Server:nginx/1.8.0
</code></pre>

<ul>
<li>第二次访问时，浏览器会带着上次nginx返回的ETag值作为If-None-Match的值，发起请求，这时候nginx会把If-None-Match值与该页面对应的ETag值进行比较，如果不相等则返回200，重新下载资源；如果二者相等，则返回304，浏览器调用本地缓存。</li>
</ul>


<p>Request</p>

<pre><code class="http">    Accept:text/css,*/*;q=0.1
    Accept-Encoding:gzip, deflate, sdch
    Accept-Language:zh-CN,zh;q=0.8,en;q=0.6
    Cache-Control:max-age=0
    Connection:keep-alive
    Host:123.57.161.203:81
    If-Modified-Since:Tue, 01 Sep 2015 09:53:12 GMT
    If-None-Match:"55e57588-7f74"
    Referer:http://123.57.161.203:81/
    User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.6 Safari/537.36
    X-FirePHP-Version:0.0.6
</code></pre>

<p>Response</p>

<pre><code class="http">    Status Code:304 Not Modified

    Cache-Control:max-age=2592000
    Connection:keep-alive
    Date:Tue, 01 Sep 2015 14:10:08 GMT
    ETag:"55e57588-7f74"
    Expires:Thu, 01 Oct 2015 14:10:08 GMT
    Last-Modified:Tue, 01 Sep 2015 09:53:12 GMT
    Server:nginx/1.8.0
</code></pre>

<p><strong>但是比较纳闷的是为什么本地有缓存了，设置expire也成功了，浏览器不直接读取cache内容而是先去web服务器请求了一次？</strong></p>

<p>正常的 from cache 的 Request（应该说没有发起请求） 和 Response 应该是这样的：</p>

<p>Request</p>

<pre><code class="http">        -
</code></pre>

<p>Response</p>

<pre><code class="http">    Status Code:200 OK (from cache)

    Accept-Ranges:bytes
    Cache-Control:max-age=2592000
    Content-Length:32628
    Content-Type:text/css
    Date:Tue, 01 Sep 2015 14:12:56 GMT
    ETag:"55e57588-7f74"
    Expires:Thu, 01 Oct 2015 14:12:56 GMT
    Last-Modified:Tue, 01 Sep 2015 09:53:12 GMT
    Server:nginx/1.8.0
</code></pre>

<p>后来看到知乎的一个问题 <a href="http://www.zhihu.com/question/28725359">阿里云存储如何让浏览器始终以200 (from cache)缓存图片</a>，里面有一句话：</p>

<blockquote><p>通过大家的回答和我自己的实验发现（Chrome上），对于阿里云的云存储，加大Cache-Control的max-age是有效的，这点我之前也试过，但是像 @yuanyuanVivian说的，是在输入URL按下回车时有效，直接刷新时图片还是无法直接加载缓存，而且无法禁用阿里云存储Etag.</p></blockquote>

<p>受到启发，终于找到问题所在了：</p>

<ul>
<li>弯路2：URL回车或者链接访问URL 与 刷新或者强制刷新（mac下的Command+R，win下的F5，Ctrl+F5等）这两种方式浏览器的处理方式是不一样的：前者操作方式，浏览器获取资源的时候不会设置 <strong>Cache-Control:max-age=0</strong>，所以如果expire设置的max-age如果仍有效的话会优先从本地cache中获取；但是后者发起Request的时候浏览器给 header 里设置的 <strong>Cache-Control:max-age=0</strong>，可以参照上文第2次访问请求。我们都知道一旦max-age为0，则不会从本地cache获取数据了，所以会发起一次http请求，nginx根据header里传来的<strong>If-Modified-Since</strong>或者<strong>If-None-Match</strong>分别与<strong>Last-Modified</strong>，<strong>Etag</strong>做对比，从而做出返回304还是200的选择，而强制刷新是将 hreader 设置为 <strong>Cache-Control:no-cache</strong>，直接返回200，下载资源.</li>
</ul>


<p>所以说 设置的 expire 是生效的。正常情况用户点链接的话，属于加载，不属于刷新，缓存的静态资源肯定会优先从本地cache获取，但是刷新的时候就避免不了一次http请求获取304了。</p>

<h2><br></h2>

<p><strong>Expire 和 ETag 都有缓存的作用，但是区别在于：</strong></p>

<ol>
<li><p>Expire 第二次访问的时候会直接从 本地cache获取，即 200（From Cache），ETag会发起一次http请求，最后返回304（Not Modified）</p></li>
<li><p>分布的问题：因为Expire第二次访问不会发起http请求，所以不存在前后资源访问不在同一台机器上的问题；但是由于每台机器在某一个时刻针对某一个资源生成ETag的值不一样，将会导致如果第二次请求分配到了另外的机器，If-None-Match与另外的服务器ETag值不对应，则重新下载资源，导致本地缓存失效！</p></li>
</ol>


<p>所以在有多台web服务器的情况下要优先使用Expire.</p>

<p>具体nginx对Expire和Etag使用优先级是什么？这个只能阅读源码，以后探索了</p>

<p>参考资料：</p>

<ol>
<li><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#etag">Module ngx_http_core_module</a></li>
<li><a href="http://blog.csdn.net/21aspnet/article/details/6604789">HTTP头信息中的参数Etag</a></li>
<li><a href="http://www.bokeyy.com/post/200-ok-from-cache-vs-304-not-modified.html">200 OK (FROM CACHE) 与 304 NOT MODIFIED</a></li>
<li><a href="http://www.zhihu.com/question/28725359">阿里云存储如何让浏览器始终以200 (from cache)缓存图片？</a></li>
<li><a href="https://developer.yahoo.com/performance/rules.html">Best Practices for Speeding Up Your Web Site</a></li>
<li><a href="http://stackoverflow.com/questions/1665082/http-status-code-200-cache-vs-status-code-304">HTTP status code 200 (cache) vs status code 304?</a></li>
<li><a href="http://www-jo.se/f.pfleger/firefox-reload">Reload vs. Refresh in Firefox (Cache-Control)</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
</div>
			</div>
			<footer id="footer" class="inner">Copyright &copy; 2015

    Gavin Jx

</footer>
		</div>
	</div>
	










</body>
</html>
