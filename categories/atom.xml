
<!DOCTYPE HTML>

<html>

<head>
	<meta charset="utf-8">
	<title>一个PHPer的博客</title>
	<meta name="author" content="Gavin Jx">

	
	<meta name="description" content="2015-09-16T00:36:36+08:00 http://www.17yuea.com// Octopress 2015-09-15T23:30:00+08:00 http://www.17yuea.com//web/php/2015/09/15/ &hellip;">
	

  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

	<link href="" rel="alternate" title="一个PHPer的博客" type="application/atom+xml">
	
	<link rel="canonical" href="http://www.17yuea.com//categories/atom.xml">
	<link href="/favicon.png" rel="shortcut icon">
	<link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
	<link href="/stylesheets/font-awesome.min.css" media="screen, projection" rel="stylesheet" type="text/css">
	<link href="/stylesheets/customer.css" media="screen, projection" rel="stylesheet" type="text/css">
	<!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
	<!-- <link href='http://fonts.googleapis.com/css?family=Nunito:400,300,700' rel='stylesheet' type='text/css'> -->
	<link href='/stylesheets/font-nunito.css' rel='stylesheet' type='text/css'>
	<!-- <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script> -->
	<script src="/javascripts/jquery-1.7.2.min.js"></script>
	
  

</head>


<body>
	<div class="container">
		<div class="left-col">
			<div class="intrude-less">
			<header id="header" class="inner"><div class="profilepic">
	<img src="/images/profile.png" alt="Profile Picture" style="width: 160px;" />
	<!-- 
	<script src="/javascripts/md5.js"></script>
	<script type="text/javascript">
		$(function(){
			$('.profilepic').append("<img src='http://www.gravatar.com/avatar/" + MD5("guojianxiang@17yuea.com") + "?s=160' alt='Profile Picture' style='width: 160px;' />");
		});
	</script>
	 -->
</div>

<nav id="main-nav"><ul class="main">
    <li><a href="/">首页</a></li>
    <li><a href="/archives">文章</a></li>
    <li><a href="/tags">标签</a></li>
    <li><a href="/about">关于我</a></li>
</ul>
</nav>
<nav id="sub-nav">
	<div class="social">
		
			<a class="email" href="mailto:guojianxiang@17yuea.com" title="Email">Email</a>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
    	
    	
    	<!--  -->
	</div>
	
</nav>
</header>				
			</div>
		</div>	
		<div class="mid-col">
			
				
			
			<div class="mid-col-container">
				<div id="content" class="inner"><?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[一个PHPer的博客]]></title>
  <link href="http://www.17yuea.com//atom.xml" rel="self"/>
  <link href="http://www.17yuea.com//"/>
  <updated>2015-09-16T00:36:36+08:00</updated>
  <id>http://www.17yuea.com//</id>
  <author>
    <name><![CDATA[Gavin Jx]]></name>
    <email><![CDATA[guojianxiang@17yuea.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[不同系统间的账户登录-Cookie跨域]]></title>
    <link href="http://www.17yuea.com//web/php/2015/09/15/Diff_System_Account_Sync/"/>
    <updated>2015-09-15T23:30:00+08:00</updated>
    <id>http://www.17yuea.com//web/php/2015/09/15/Diff_System_Account_Sync</id>
    <content type="html"><![CDATA[<blockquote><p>这两天在做：让两个系统间的帐号同步，其中涉及到跨域登录.</p></blockquote>

<!-- more -->


<p>背景是这样的：现在有两个系统SystemA和SystemB，要求在SystemA里可以注册SystemB的帐号，同时注册SystemB的时候需要依赖一个新的SystemA的帐号，并且要求在登录SystemB的时候同时登录SystemA的新帐号，并且在同一个浏览器内可以同时登录SystemA的初始帐号SA，SystemB的帐号SB和SystemA的新帐号SAN.</p>

<p>系统SystemA和SystemB都是采用Cookie记录登录操作的. 因此需要同时有SA, SB, SAN三者的Cookie.</p>

<p>解决方案是：使用三个域名（<code>abc.com</code>, <code>sb.abc.com</code>, <code>newsa.abc.com</code>）,其中SA访问<code>abc.com</code>进行登录, SAN访问<code>newsa.abc.com</code>进行登录, SB访问<code>sb.abc.com</code>进行登录. 其中<code>abc.com</code>和<code>newsa.abc.com</code>都指向SystemA, <code>sb.abc.com</code>指向SystemB. 这样SA登录的时候使用域<code>abc.com</code>的Cookie, SAN登录的时候使用<code>newsa.abc.com</code>的Cookie, SB登录的时候使用<code>sb.abc.com</code>的Cookie.</p>

<ul>
<li>跨域登录：其实很简单，首先使用SA登录<code>abc.com</code>，这时候已经种植了<code>abc.com</code>的Cookie, 然后用SB登录SystemB成功后种植了<code>sb.abc.com</code>的Cookie, 登录SystemB的时候动态生成一个script，该script的src指向<code>newsa.abc.com</code>的一个URL，该URL负责种植域<code>newsa.abc.com</code>下的Cookie（也就是采用动态载入异域的script解决跨域）.</li>
</ul>


<p>在<code>sb.abc.com</code>的登录页面ajax验证登录成功后执行下面的代码，动态引入<code>newsa.abc.com</code>的一个URL作为dom-script.</p>

<blockquote><p>你可能会问为什么不在<code>sb.abc.com</code>直接种植<code>newsa.abc.com</code>下的Cookie呢？</p>

<p>因为种不了，这属于跨域了. sb.abc.com可以种植sb.abc.com和abc.com下的Cookie, 无法在同级别的二级域名下种植Cookie.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">loadScript</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">callbackData</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">script</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;script&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">script</span><span class="p">.</span><span class="nx">type</span> <span class="o">=</span> <span class="s2">&quot;text/javascript&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span><span class="p">){</span> <span class="c1">//IE </span>
</span><span class='line'>      <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s2">&quot;loaded&quot;</span> <span class="o">||</span>
</span><span class='line'>              <span class="nx">script</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">==</span> <span class="s2">&quot;complete&quot;</span><span class="p">){</span>
</span><span class='line'>              <span class="nx">script</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>              <span class="nx">callback</span><span class="p">(</span><span class="nx">callbackData</span><span class="p">);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">//Others: Firefox, Safari, Chrome, and Opera </span>
</span><span class='line'>      <span class="nx">script</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="nx">callback</span><span class="p">(</span><span class="nx">callbackData</span><span class="p">);</span>   
</span><span class='line'>      <span class="p">};</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">script</span><span class="p">.</span><span class="nx">src</span> <span class="o">=</span> <span class="nx">url</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">script</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">loadScript</span><span class="p">(</span><span class="s1">&#39;http://newsa.abc.com/project/setcookie&#39;</span><span class="p">,</span> <span class="nx">callback</span><span class="p">,</span> <span class="nx">callbackData</span><span class="p">)</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>嗯，还支持简单的回调 ~</p>

<ul>
<li>父域和子域Cookie的发送优先级</li>
</ul>


<p>没错，通过上面的异步引入<code>newsa.abc.com</code>一个种植Cookie的URL我们可以成功种植Cookie.</p>

<p>But, 当我们访问<code>newsa.abc.com</code>的时候发现浏览器在Header里发送的不是 <code>newsa.abc.com</code>的Cookie, 而是<code>abc.com</code>的Cookie. 即当父域和子域的Cookie同时存在时访问子域的URL，浏览器会优先发送父域的Cookie.</p>

<p>我们翻阅下种植Cookie的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">bool</span> <span class="nb">setcookie</span> <span class="p">(</span> <span class="nx">string</span> <span class="nv">$name</span> <span class="p">[,</span> <span class="nx">string</span> <span class="nv">$value</span> <span class="p">[,</span> <span class="nx">int</span> <span class="nv">$expire</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">[,</span> <span class="nx">string</span> <span class="nv">$path</span> <span class="p">[,</span> <span class="nx">string</span> <span class="nv">$domain</span> <span class="p">[,</span> <span class="nx">bool</span> <span class="nv">$secure</span> <span class="o">=</span> <span class="k">false</span> <span class="p">[,</span> <span class="nx">bool</span> <span class="nv">$httponly</span> <span class="o">=</span> <span class="k">false</span> <span class="p">]]]]]]</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>path</code> 就是我们解决问题的关键，由于项目正好不是在域名下的<code>'/'根目录</code>，所以对于子域的Cookie, 我们种植到项目目录下，父域的Cookie还是种植到<code>'/'根目录</code>, 假设项目目录为：<code>/project</code>，当访问<code>abc.com/project</code>下的URI时，发送的是<code>abc.com</code>的Cookie, 访问<code>newsa.abc.com/project</code>的URI时，发送的是<code>newsa.abc.com</code>的Cookie（因为我们设置了newsa.abc.com的Cookie的path，所以优先发送. ）</p>

<p>当然我们完全可以将<code>newsa.abc.com</code>替换成<code>def.com</code>，这样就不涉及子域，父域的Cookie共享问题了，但是我们有自己的业务考虑，使用<code>newsa.abc.com</code>对用户来说更能体现我们业务的紧密型.</p>

<p><br></p>

<p>总结下Cookie的跨域共享：</p>

<ol>
<li>在可读取的path下子域可以共享父域的Cookie，同时如果二者都存在，优先使用匹配当前path的Cookie.</li>
<li>不同的子域之间不能种植Cookie.</li>
<li>子域可以种植父域的Cookie.</li>
<li>父域不可以种植子域的Cookie.</li>
<li>父域不可以共享子域的Cookie.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[读《张居正》有感]]></title>
    <link href="http://www.17yuea.com//%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%82%9F/2015/09/10/%E8%AF%BB%E3%80%8A%E5%BC%A0%E5%B1%85%E6%AD%A3%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <updated>2015-09-10T22:00:00+08:00</updated>
    <id>http://www.17yuea.com//%E8%AF%BB%E4%B9%A6%E6%84%9F%E6%82%9F/2015/09/10/读《张居正》有感</id>
    <content type="html"><![CDATA[<blockquote><p>这是一本全四册的书，以一代名相开辟<code>万历新政</code>的艰难里程为主线，写尽宫廷斗争与张居正的处事智慧.</p></blockquote>

<!-- more -->


<p>自古有言，<code>天将降大任于斯人也，必先苦其心志，劳其筋骨，饿其体肤</code>，对于张居正也是这样的.</p>

<p>对历史比较感兴趣，这本书豆瓣评分很高，于是就开看了，记得好像是从7月份中旬开始看的，每晚都会读上一段，陆陆续续已经看到第三册了.</p>

<p>当看到第二册的时候，有一天突然百科了一下张居正，才知道生前把一个国库空虚，吏制败坏的国家变得库房充盈，上下清明的<code>万历</code>新代，死后落得险遭鞭尸，抄家等等一系列变故，不禁让人想起“功高盖主“，“狡兔死，走狗烹”的下场，剩余的情节不想再看，最后还是坚持了下来.</p>

<p>“君子以自强不息”，面对重重困扰，很欣赏张居正的不屈不挠，处事不惊.</p>

<p>对张居正的管理有个很赞同的观点：不重用清吏！</p>

<p>俗话说：水至清则无鱼. 每个人都是有欲望的，即便是圣人也只是尽力做到节欲而已. 有追求同样可以说是一种向上的态度. 所谓清吏，处处节制自己，扼杀了自己的本性，把一个靓丽的人性变得愤世嫉俗、刚正不阿可好？这明显是情商不发达的表现. 真正的智慧者感觉应该是处事圆润，只要不违法，不损人，出发点是好的，中间的方式和过程随性就好，清流太清同样会破坏掉生态.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派控制有源蜂鸣器]]></title>
    <link href="http://www.17yuea.com//%E6%A0%91%E8%8E%93%E6%B4%BE/2015/09/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8E%A7%E5%88%B6%E6%9C%89%E6%BA%90%E8%9C%82%E9%B8%A3%E5%99%A8/"/>
    <updated>2015-09-06T23:17:00+08:00</updated>
    <id>http://www.17yuea.com//%E6%A0%91%E8%8E%93%E6%B4%BE/2015/09/06/树莓派控制有源蜂鸣器</id>
    <content type="html"><![CDATA[<blockquote><p>前几天淘的温湿度传感器和有源蜂鸣器今天终于到了，今晚10点半左右就整起来了.</p></blockquote>

<!--more-->


<p>大学里学的电路图早已忘的一干二净，听起来实现起来有点难度的样子.</p>

<p>5V有源蜂鸣器 电磁式（SOT塑封管 长声 ）属性：</p>

<table>
<thead>
<tr>
<th>名称</th>
<th>属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>电压</td>
<td> 3.5—5.5V</td>
</tr>
<tr>
<td>电流</td>
<td>  &lt;25mA</td>
</tr>
<tr>
<td>频率</td>
<td>  2300±500</td>
</tr>
</tbody>
</table>


<p>关于有源蜂鸣器和无源蜂鸣器的区别：</p>

<blockquote><p>无源蜂鸣器：</p>

<ol>
<li><p>无源内部不带震荡源，所以如果用直流信号无法令其鸣叫，必须用2K~5K的方波去驱动它.</p></li>
<li><p>声音频率可控，可以做出“多来米发索拉西”的效果.</p></li>
<li><p>在一些特例中，可以和LED复用一个控制口.</p></li>
</ol>


<p>有源蜂鸣器：</p>

<ol>
<li><p>有源蜂鸣器内部带震荡源，所以只要一通电就会叫.</p></li>
<li><p>程序控制方便，单片机一个高低电平就可以让其发出声音，而无源蜂鸣器却做不到.</p></li>
</ol>
</blockquote>

<ul>
<li>首先找来了树莓派的接口图（我的小派是二代的）：</li>
</ul>


<p><img src="http://www.17yuea.com//images/pi_io.png" alt="树莓派接口图" /></p>

<ul>
<li>找来淘宝的蜂鸣器图片介绍：</li>
</ul>


<p><img src="http://www.17yuea.com//images/fengmingqi_io.png" alt="有源蜂鸣器结构图" /></p>

<p><img src="http://www.17yuea.com//images/fengmingqi_io_shiwu.png" alt="有源蜂鸣器结构图" /></p>

<p>标有 <code>+</code> 的就是蜂鸣器的正极，所以当把正极接到5V接口上，并把另一个接口接到随便一个IO口上时，有源蜂鸣器便正常工作了，如下图所示，黑线接的是正极，接到2口上，白线接到9口GPIO4上：</p>

<p><img src="http://www.17yuea.com//images/fengmingqi_changxiang.jpg" alt="有源蜂鸣器长响，正常工作图" /></p>

<ul>
<li>证明蜂鸣器没有问题后，接下来就考虑怎么用python控制蜂鸣器了</li>
</ul>


<p>步骤和网上的差不多，我改了下程序：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@raspberrypi:/data/python/chuanganqi# vim libbeep.py
</span></code></pre></td></tr></table></div></figure>


<p>插入如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">RPi.GPIO</span> <span class="kn">as</span> <span class="nn">GPIO</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="n">PIN_NO</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'><span class="n">GPIO</span><span class="o">.</span><span class="n">setmode</span><span class="p">(</span><span class="n">GPIO</span><span class="o">.</span><span class="n">BOARD</span><span class="p">)</span>
</span><span class='line'><span class="n">GPIO</span><span class="o">.</span><span class="n">setup</span><span class="p">(</span><span class="n">PIN_NO</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">OUT</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">beep</span><span class="p">(</span><span class="n">seconds</span><span class="p">):</span>
</span><span class='line'>     <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="n">PIN_NO</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">HIGH</span><span class="p">)</span>
</span><span class='line'>     <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">seconds</span><span class="p">)</span>
</span><span class='line'>     <span class="n">GPIO</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="n">PIN_NO</span><span class="p">,</span> <span class="n">GPIO</span><span class="o">.</span><span class="n">LOW</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">beepAction</span><span class="p">(</span><span class="n">secs</span><span class="p">,</span> <span class="n">sleepsecs</span><span class="p">,</span> <span class="n">times</span><span class="p">):</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">times</span><span class="p">):</span>
</span><span class='line'>        <span class="n">beep</span><span class="p">(</span><span class="n">secs</span><span class="p">)</span>
</span><span class='line'>        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">sleepsecs</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@raspberrypi:/data/python/chuanganqi# vim alarm.py
</span></code></pre></td></tr></table></div></figure>


<p>插入如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">RPi.GPIO</span> <span class="kn">as</span> <span class="nn">GPIO</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">libbeep</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;continued&quot;</span>
</span><span class='line'>        <span class="n">libbeep</span><span class="o">.</span><span class="n">beepAction</span> <span class="p">(</span><span class="mf">0.05</span><span class="p">,</span><span class="mf">0.05</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后执行 <code>alarm.py</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>root@raspberrypi:/data/python/chuanganqi# python alarm.py
</span></code></pre></td></tr></table></div></figure>


<p>在 <code>libbeep.py</code>里<code>PIN_NO = 12</code>代表的是channel，针脚值</p>

<p>杜邦线插入的位置如下：</p>

<p><img src="http://www.17yuea.com//images/fengmingqi_channel.jpg" alt="有源蜂鸣器python引脚图" /></p>

<p>这样每隔三秒，蜂鸣器会报两次，听着爽爽的~</p>

<p><br>
环境准备：</p>

<ol>
<li><p><a href="https://item.taobao.com/item.htm?spm=2013.1.0.0.UqdfpT&amp;id=43751062868&amp;source=superboss&amp;appId=113">二代树莓派一个</a></p></li>
<li><p><a href="https://detail.tmall.com/item.htm?id=41231486727&amp;spm=a1z09.2.0.0.wRRwkT&amp;_u=6mh7bd0688f">有源蜂鸣器一个</a></p></li>
<li><p><a href="https://detail.tmall.com/item.htm?id=41254478179&amp;spm=a1z09.2.0.0.y3wVBD&amp;_u=6mh7bd0d7e0">杜邦线两根</a> 我买的一沓，40根</p></li>
</ol>


<p><code>观月堂</code>的小π还可以，配件就算了，相对别家来说有点贵，所以选了<code>telesky</code></p>

<p><br>
参考资料：</p>

<ol>
<li><p><a href="http://www.eeboard.com/bbs/forum.php?mod=viewthread&amp;tid=39728">树莓派用蜂鸣器实现整点报时</a></p></li>
<li><p><a href="http://www.eefocus.com/nightseas/blog/15-07/315199_48b6a.html">硬件篇（一）DIY一个树莓派扩展板</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP调试工具-Xdebug]]></title>
    <link href="http://www.17yuea.com//php/2015/09/06/PHP%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7Xdebug/"/>
    <updated>2015-09-06T23:00:00+08:00</updated>
    <id>http://www.17yuea.com//php/2015/09/06/PHP调试工具Xdebug</id>
    <content type="html"><![CDATA[<blockquote><p>刚刚过完了三天的小长假，假期没事的时候整理了一下Xdebug的使用. 在测试服务器上装上也方便大家调试，提高大家的编码效率.</p></blockquote>

<!--more-->


<p>先解释下xdebug等工作原理：</p>

<p>进行xdebug调试，我们需要xdebug客户端和xdebug服务端，编译到php的就是服务端，客户端一般需要我们自己安装（像sublime text），或者一般的IDE都已经集成.</p>

<p>当我们进行xdebug调试时，首先客户端会监听一个端口，然后等待xdebug服务端连接，连接成功则进行通信.如下图所示：</p>

<p><img src="http://www.17yuea.com//images/php/xdebug/dbgp-setup.gif" alt="原理图" /></p>

<p>本机的IP(也就是IDE的IP)是10.0.1.42，监听的是本机的9000端口；
服务器的IP是10.0.1.2，连接的是80端口（web服务器默认端口）；</p>

<p>所以在<code>php.ini</code>里我们的配置应该是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xdebug.remote_host<span class="o">=</span>10.0.1.42
</span><span class='line'>xdebug.remote_port<span class="o">=</span><span class="m">9000</span>
</span></code></pre></td></tr></table></div></figure>


<p>(PS：如果本机开着php并运行在9000端口上，应该换一个端口)</p>

<p>其中<code>remote_host</code> 就是xdebug服务器回调客户端的IP，也就是你进行xdebug调试的机器的IP</p>

<blockquote><p>但是当我们有很多人进行远程调试的时候，这个<code>remote_host</code>不能动态变化，这样就没法满足所有人的调试需求了？</p></blockquote>

<p>解决方法：在xdebug服务端有一个配置<code>xdebug.remote_connect_back</code>，这个值一旦设定为1就可以解决IP不是remote_host中值无法调试的问题，xdebug服务端可以从http请求的头部<code>$_SERVER['REMOTE_ADDR']</code>获取远程客户端的IP地址，如下图：</p>

<p><img src="http://www.17yuea.com//images/php/xdebug/dbgp-setup2.gif" alt="原理图" /></p>

<ul>
<li>好了，讲完原理，我们看下怎么编译服务端的：</li>
</ul>


<p>从官网wget编译文件，解压安装包</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@web4 software<span class="o">]</span><span class="c"># tar -zvxf xdebug-2.3.3.tgz</span>
</span><span class='line'><span class="o">[</span>root@web4 software<span class="o">]</span><span class="c"># cd xdebug-2.3.3</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>README</code> 中有关于安装的详细步骤，我的php安装路径为：/data/app/php</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>root@web4 xdebug-2.3.3<span class="o">]</span><span class="c"># /data/app/php/bin/phpize</span>
</span><span class='line'><span class="o">[</span>root@web4 xdebug-2.3.3<span class="o">]</span><span class="c"># ./configure --enable-xdebug --with-php-config=/data/app/php/bin/php-config</span>
</span><span class='line'>make <span class="o">&amp;&amp;</span> make install
</span></code></pre></td></tr></table></div></figure>


<p>配置php.ini</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>xdebug<span class="o">]</span>
</span><span class='line'><span class="nv">zend_extension</span><span class="o">=</span><span class="s2">&quot;xdebug.so&quot;</span>
</span><span class='line'>xdebug.auto_trace<span class="o">=</span><span class="nb">true</span>
</span><span class='line'>xdebug.remote_enable<span class="o">=</span>1
</span><span class='line'>xdebug.remote_autostart<span class="o">=</span>1
</span><span class='line'>xdebug.remote_handler<span class="o">=</span>dbgp
</span><span class='line'>xdebug.remote_host<span class="o">=</span>192.168.0.116
</span><span class='line'>xdebug.remote_connect_back<span class="o">=</span>1
</span><span class='line'>xdebug.remote_port<span class="o">=</span>9090
</span><span class='line'>xdebug.idekey<span class="o">=</span>web
</span><span class='line'>xdebug.remote_log<span class="o">=</span><span class="s2">&quot;/data/app/php/var/log/xdebug/xdebug.log&quot;</span>
</span><span class='line'>xdebug.profiler_enable<span class="o">=</span>1
</span><span class='line'>xdebug.profiler_output_dir<span class="o">=</span><span class="s2">&quot;/data/app/php/var/log/xdebug/xdebug-profiler&quot;</span>
</span><span class='line'><span class="p">;</span>xdebug.dump_once <span class="o">=</span> On
</span><span class='line'><span class="p">;</span>xdebug.dump_globals <span class="o">=</span> On
</span><span class='line'><span class="p">;</span>xdebug.dump_undefined <span class="o">=</span> On
</span><span class='line'><span class="p">;</span>xdebug.dump.SERVER <span class="o">=</span> REQUEST_METHOD,REQUEST_URI,HTTP_USER_AGENT
</span><span class='line'><span class="p">;</span>xdebug.dump.REQUEST<span class="o">=</span>*
</span><span class='line'><span class="p">;</span>xdebug.show_exception_trace <span class="o">=</span> On
</span><span class='line'><span class="p">;</span>xdebug.show_local_vars <span class="o">=</span> <span class="m">1</span>
</span><span class='line'><span class="p">;</span>xdebug.var_display_max_depth <span class="o">=</span> <span class="m">6</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>现在用sublime text3来说下怎么配置客户端</li>
</ul>


<p>安装 package <code>Xdebug Client</code></p>

<p>新建一个 project 并且执行 <code>项目=&gt;项目另存为</code>,并且已经成功设置 sftp</p>

<p>编辑存储后的project文件</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;folders&quot;</span><span class="p">:</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="nt">&quot;path&quot;</span><span class="p">:</span> <span class="s2">&quot;/MyLocalProjectPath/xdebug&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nt">&quot;settings&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;xdebug&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>              <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;http://RemoteAddr/xdebug/index.php&quot;</span><span class="p">,</span>
</span><span class='line'>             <span class="nt">&quot;path_mapping&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>                <span class="nt">&quot;/MyLocalProjectPath/xdebug/&quot;</span> <span class="p">:</span> <span class="s2">&quot;/RemoteProjectLocation/xdebug/&quot;</span>
</span><span class='line'>            <span class="p">},</span>
</span><span class='line'>            <span class="nt">&quot;ide_key&quot;</span><span class="p">:</span> <span class="s2">&quot;web&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;super_globals&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;close_on_stop&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;port&quot;</span><span class="p">:</span> <span class="mi">9090</span><span class="p">,</span>
</span><span class='line'>            <span class="nt">&quot;debug&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>新加入的代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;settings&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;xdebug&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;http://RemoteAddr/xdebug/index.php&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="nt">&quot;path_mapping&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nt">&quot;/MyLocalProjectPath/xdebug/&quot;</span> <span class="p">:</span> <span class="s2">&quot;/RemoteProjectLocation/xdebug/&quot;</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="nt">&quot;ide_key&quot;</span><span class="p">:</span> <span class="s2">&quot;web&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;super_globals&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;close_on_stop&quot;</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;port&quot;</span><span class="p">:</span> <span class="mi">9090</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;debug&quot;</span><span class="p">:</span> <span class="kc">true</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果是在本机进行调试，可以这样设置：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;settings&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;xdebug&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>             <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;http://localhost/xdebug&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>记得重启php-fpm</strong></p>

<p>配置完毕！可以设置断点调试了~</p>

<hr />

<p>更新：</p>

<p>sublime text不支持多人调试的模式，经测试发现设置了<code>remote_connect_back=1</code>并注释掉<code>remote_host</code>后，sublime text无法与xdebug服务器进行通信，后来发现是需要 <a href="http://derickrethans.nl/debugging-with-multiple-users.html">DBGp代理</a>的.</p>

<p>一般的IDE是集成的，并且sublime text xdebug界面也不是很友好，如果需要debug的时候感觉phpstorm比较顺手.</p>

<p>对于 调试 Zendframework 也有了比较好的方法，由于Zendframework是做过路由的，因此没法进行 map 对应，之前看过一篇文章说的是在debug的时候做路由映射，我可能比较懒吧，想到了另一种方法：</p>

<p>我们只设置一个 debug 文件，需要对 某个action进行debug的时候只需要引入这个controller，new 一个 controller 类，然后调用对应的action即可，经过测试，在action里的变量可以在debug文件中进行debug时完全可以捕获！</p>

<p>[参考资料]</p>

<ol>
<li><p><a href="http://www.xdebug.org/docs/remote">官方文档</a></p></li>
<li><p><a href="https://packagecontrol.io/packages/Xdebug%20Client">SublimeTextXdebug</a></p></li>
<li><p><a href="http://www.jetbrains.com/phpstorm/help/configuring-xdebug.html">PhpStorm 9.0.0 Help/Configuring Xdebug</a></p></li>
<li><p><a href="http://blog.csdn.net/yaoyuan_difang/article/details/11656759">使用netbeans进行PHP团队开发和基于xdebug进行多人远程调试</a></p></li>
<li><p><a href="http://www.sitepoint.com/debugging-xdebug-sublime-text-3/">Debugging with Xdebug and Sublime Text 3</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP调试工具-Strace]]></title>
    <link href="http://www.17yuea.com//php/2015/09/06/PHP%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7Strace/"/>
    <updated>2015-09-06T13:35:00+08:00</updated>
    <id>http://www.17yuea.com//php/2015/09/06/PHP调试工具Strace</id>
    <content type="html"><![CDATA[<blockquote><p>昨天的时候，刚好看了下php调试方面的东西，正好看到了Strace，没想到今天就用上了.</p></blockquote>

<!--more-->


<p>今天，补单程序突然出现bug，有两笔订单掉单了却没有补单成功.</p>

<ul>
<li>首先，查了下 补单脚本</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ps -ef<span class="p">|</span>grep Patch
</span><span class='line'>xx      <span class="m">32687</span>  <span class="m">3224</span>  <span class="m">0</span> Aug20 ?        00:00:48 ...
</span></code></pre></td></tr></table></div></figure>


<p>补单脚本是守护进程控制的，但是看到这个时间点 <code>Aug20</code>，说明8.20日之后，脚本没有自动关闭，一直在执行. 所以就想看看是什么原因导致了脚本一直执行而没有退出.</p>

<ul>
<li>使用 <code>Strace</code> 命令</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>strace -p 32687
</span><span class='line'>
</span><span class='line'>restart_syscall<span class="o">(</span>&lt;... resuming interrupted call ...&gt;<span class="o">)</span> <span class="o">=</span> 0
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 1000<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 1000<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 1000<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 1000<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 1000^C &lt;unfinished ...&gt;
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，程序一直卡在curl超时上，然后检查了下补单相关的 curl 操作，发现大多数的 curl 没有加入连接超时时间，当DNS出现问题时，一直在等待服务器的回应，导致脚本调用的时候卡死.</p>

<p>总结一下：Strace 还有很多用法，比如查看一段时间内调用系统函数最多的统计等等，<code>strace -p 进程ID</code> 是查看该进程的系统函数调用情况，对于异步脚本很有用！ 很多strace的用法以后会再更新~</p>

<h2><br></h2>

<p>参考资料：</p>

<ol>
<li><a href="http://www.dewen.io/q/17309/php+curl%E8%B0%83%E7%94%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%8D%A1%E6%AD%BB%EF%BC%8Cstrace%E7%BB%93%E6%9E%9C%E5%A6%82%E5%86%85">php curl调用的时候卡死，strace结果如内</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 HttpStatus 200（From Cache）和 304（Not Modified）的探索]]></title>
    <link href="http://www.17yuea.com//web/2015/09/01/%E5%85%B3%E4%BA%8E%20HttpStatus%20200%EF%BC%88From%20Cache%EF%BC%89%E5%92%8C%20304%EF%BC%88Not%20Modified%EF%BC%89%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <updated>2015-09-01T23:00:00+08:00</updated>
    <id>http://www.17yuea.com//web/2015/09/01/关于 HttpStatus 200（From Cache）和 304（Not Modified）的探索</id>
    <content type="html"><![CDATA[<p>今晚走了很长时间的弯路，最后发现问题在于 <strong>url load 访问</strong> 和 <strong>Command+R</strong> 刷新上，道路曲折但是很有意思。</p>

<blockquote><p>问题的起源在于晚上把一个demo部署到阿里云上，在配置nginx的时候，设置了expire。但是当用Chrome检查Network的时候，发现已经设置了expire的css，js，image 总是返回304（Not Modified）的状态。因为之前服务器缓存资源出现返回304的问题，所以就打算看下到底是什么问题</p></blockquote>

<!-- more -->


<p>首先，我断定自己的expire是没有设置错的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">location</span> <span class="p">~</span> <span class="sr">.*.(css|js)$</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">expires</span> <span class="s">30d</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>于是开始查看是否是ETag的配置问题？</p>

<ul>
<li>弯路1：nginx自从1.3版本后默认带有etag，木有发现，然后去github下载第三方ETag插件编译。。。 1.3版本后可以通过设置 etag on|off实现 etag 的配置，并且默认开启etag.</li>
</ul>


<p>Web服务器我们以nginx为例，以css文件为例，ETag可以理解为一个文件的标记，是唯一的.</p>

<p>ETag的工作原理是：</p>

<ul>
<li>第一次访问， nginx会返回ETag值，浏览器会记录下来</li>
</ul>


<p>Request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Accept:text/css,*/*;q=0.1</span>
</span><span class='line'><span class="err">Accept-Encoding:gzip, deflate, sdch</span>
</span><span class='line'><span class="err">Accept-Language:zh-CN,zh;q=0.8,en;q=0.6</span>
</span><span class='line'><span class="err">Cache-Control:no-cache</span>
</span><span class='line'><span class="err">Connection:keep-alive</span>
</span><span class='line'><span class="err">Host:123.57.161.203:81</span>
</span><span class='line'><span class="err">Pragma:no-cache</span>
</span><span class='line'><span class="err">Referer:http://123.57.161.203:81/</span>
</span><span class='line'><span class="err">User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.6 Safari/537.36</span>
</span><span class='line'><span class="err">X-FirePHP-Version:0.0.6</span>
</span></code></pre></td></tr></table></div></figure>


<p>Response</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Status Code:200 OK</span>
</span><span class='line'>
</span><span class='line'><span class="err">Accept-Ranges:bytes</span>
</span><span class='line'><span class="err">Cache-Control:max-age=2592000</span>
</span><span class='line'><span class="err">Connection:keep-alive</span>
</span><span class='line'><span class="err">Content-Length:32628</span>
</span><span class='line'><span class="err">Content-Type:text/css</span>
</span><span class='line'><span class="err">Date:Tue, 01 Sep 2015 14:06:27 GMT</span>
</span><span class='line'><span class="err">ETag:&quot;55e57588-7f74&quot;</span>
</span><span class='line'><span class="err">Expires:Thu, 01 Oct 2015 14:06:27 GMT</span>
</span><span class='line'><span class="err">Last-Modified:Tue, 01 Sep 2015 09:53:12 GMT</span>
</span><span class='line'><span class="err">Server:nginx/1.8.0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第二次访问时，浏览器会带着上次nginx返回的ETag值作为If-None-Match的值，发起请求，这时候nginx会把If-None-Match值与该页面对应的ETag值进行比较，如果不相等则返回200，重新下载资源；如果二者相等，则返回304，浏览器调用本地缓存。</li>
</ul>


<p>Request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Accept:text/css,*/*;q=0.1</span>
</span><span class='line'><span class="err">Accept-Encoding:gzip, deflate, sdch</span>
</span><span class='line'><span class="err">Accept-Language:zh-CN,zh;q=0.8,en;q=0.6</span>
</span><span class='line'><span class="err">Cache-Control:max-age=0</span>
</span><span class='line'><span class="err">Connection:keep-alive</span>
</span><span class='line'><span class="err">Host:123.57.161.203:81</span>
</span><span class='line'><span class="err">If-Modified-Since:Tue, 01 Sep 2015 09:53:12 GMT</span>
</span><span class='line'><span class="err">If-None-Match:&quot;55e57588-7f74&quot;</span>
</span><span class='line'><span class="err">Referer:http://123.57.161.203:81/</span>
</span><span class='line'><span class="err">User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.6 Safari/537.36</span>
</span><span class='line'><span class="err">X-FirePHP-Version:0.0.6</span>
</span></code></pre></td></tr></table></div></figure>


<p>Response</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Status Code:304 Not Modified</span>
</span><span class='line'>
</span><span class='line'><span class="err">Cache-Control:max-age=2592000</span>
</span><span class='line'><span class="err">Connection:keep-alive</span>
</span><span class='line'><span class="err">Date:Tue, 01 Sep 2015 14:10:08 GMT</span>
</span><span class='line'><span class="err">ETag:&quot;55e57588-7f74&quot;</span>
</span><span class='line'><span class="err">Expires:Thu, 01 Oct 2015 14:10:08 GMT</span>
</span><span class='line'><span class="err">Last-Modified:Tue, 01 Sep 2015 09:53:12 GMT</span>
</span><span class='line'><span class="err">Server:nginx/1.8.0</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>但是比较纳闷的是为什么本地有缓存了，设置expire也成功了，浏览器不直接读取cache内容而是先去web服务器请求了一次？</strong></p>

<p>正常的 from cache 的 Request（应该说没有发起请求） 和 Response 应该是这样的：</p>

<p>Request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">   -</span>
</span></code></pre></td></tr></table></div></figure>


<p>Response</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Status Code:200 OK (from cache)</span>
</span><span class='line'>
</span><span class='line'><span class="err">Accept-Ranges:bytes</span>
</span><span class='line'><span class="err">Cache-Control:max-age=2592000</span>
</span><span class='line'><span class="err">Content-Length:32628</span>
</span><span class='line'><span class="err">Content-Type:text/css</span>
</span><span class='line'><span class="err">Date:Tue, 01 Sep 2015 14:12:56 GMT</span>
</span><span class='line'><span class="err">ETag:&quot;55e57588-7f74&quot;</span>
</span><span class='line'><span class="err">Expires:Thu, 01 Oct 2015 14:12:56 GMT</span>
</span><span class='line'><span class="err">Last-Modified:Tue, 01 Sep 2015 09:53:12 GMT</span>
</span><span class='line'><span class="err">Server:nginx/1.8.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来看到知乎的一个问题 <a href="http://www.zhihu.com/question/28725359">阿里云存储如何让浏览器始终以200 (from cache)缓存图片</a>，里面有一句话：</p>

<blockquote><p>通过大家的回答和我自己的实验发现（Chrome上），对于阿里云的云存储，加大Cache-Control的max-age是有效的，这点我之前也试过，但是像 @yuanyuanVivian说的，是在输入URL按下回车时有效，直接刷新时图片还是无法直接加载缓存，而且无法禁用阿里云存储Etag.</p></blockquote>

<p>受到启发，终于找到问题所在了：</p>

<ul>
<li>弯路2：URL回车或者链接访问URL 与 刷新或者强制刷新（mac下的Command+R，win下的F5，Ctrl+F5等）这两种方式浏览器的处理方式是不一样的：前者操作方式，浏览器获取资源的时候不会设置 <strong>Cache-Control:max-age=0</strong>，所以如果expire设置的max-age如果仍有效的话会优先从本地cache中获取；但是后者发起Request的时候浏览器给 header 里设置的 <strong>Cache-Control:max-age=0</strong>，可以参照上文第2次访问请求。我们都知道一旦max-age为0，则不会从本地cache获取数据了，所以会发起一次http请求，nginx根据header里传来的<strong>If-Modified-Since</strong>或者<strong>If-None-Match</strong>分别与<strong>Last-Modified</strong>，<strong>Etag</strong>做对比，从而做出返回304还是200的选择，而强制刷新是将 hreader 设置为 <strong>Cache-Control:no-cache</strong>，直接返回200，下载资源.</li>
</ul>


<p>所以说 设置的 expire 是生效的。正常情况用户点链接的话，属于加载，不属于刷新，缓存的静态资源肯定会优先从本地cache获取，但是刷新的时候就避免不了一次http请求获取304了。</p>

<h2><br></h2>

<p><strong>Expire 和 ETag 都有缓存的作用，但是区别在于：</strong></p>

<ol>
<li><p>Expire 第二次访问的时候会直接从 本地cache获取，即 200（From Cache），ETag会发起一次http请求，最后返回304（Not Modified）</p></li>
<li><p>分布的问题：因为Expire第二次访问不会发起http请求，所以不存在前后资源访问不在同一台机器上的问题；但是由于每台机器在某一个时刻针对某一个资源生成ETag的值不一样，将会导致如果第二次请求分配到了另外的机器，If-None-Match与另外的服务器ETag值不对应，则重新下载资源，导致本地缓存失效！</p></li>
</ol>


<p>所以在有多台web服务器的情况下要优先使用Expire.</p>

<p>具体nginx对Expire和Etag使用优先级是什么？这个只能阅读源码，以后探索了</p>

<p>参考资料：</p>

<ol>
<li><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#etag">Module ngx_http_core_module</a></li>
<li><a href="http://blog.csdn.net/21aspnet/article/details/6604789">HTTP头信息中的参数Etag</a></li>
<li><a href="http://www.bokeyy.com/post/200-ok-from-cache-vs-304-not-modified.html">200 OK (FROM CACHE) 与 304 NOT MODIFIED</a></li>
<li><a href="http://www.zhihu.com/question/28725359">阿里云存储如何让浏览器始终以200 (from cache)缓存图片？</a></li>
<li><a href="https://developer.yahoo.com/performance/rules.html">Best Practices for Speeding Up Your Web Site</a></li>
<li><a href="http://stackoverflow.com/questions/1665082/http-status-code-200-cache-vs-status-code-304">HTTP status code 200 (cache) vs status code 304?</a></li>
<li><a href="http://www-jo.se/f.pfleger/firefox-reload">Reload vs. Refresh in Firefox (Cache-Control)</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://www.17yuea.com//2015/05/30/HelloWorld/"/>
    <updated>2015-05-30T18:49:00+08:00</updated>
    <id>http://www.17yuea.com//2015/05/30/HelloWorld</id>
    <content type="html"><![CDATA[<p>Hi, This is the first page!</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="s1">&#39;Hello World!&#39;</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
</div>
			</div>
			<footer id="footer" class="inner">Copyright &copy; 2015

    Gavin Jx

</footer>
		</div>
	</div>
	










</body>
</html>
