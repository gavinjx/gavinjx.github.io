
<!DOCTYPE HTML>

<html>

<head>
	<meta charset="utf-8">
	<title>一个PHPer的博客</title>
	<meta name="author" content="Gavin Jx">

	
	<meta name="description" content="2015-09-07T00:16:25+08:00 http://www.17yuea.com// Octopress 2015-09-06T23:17:00+08:00 http://www.17yuea.com//%E6%A0%91%E8%8E%93%E6%B4%BE/2015/09/06/ &hellip;">
	

  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

	<link href="" rel="alternate" title="一个PHPer的博客" type="application/atom+xml">
	
	<link rel="canonical" href="http://www.17yuea.com//atom.xml">
	<link href="/favicon.png" rel="shortcut icon">
	<link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
	<link href="/stylesheets/font-awesome.min.css" media="screen, projection" rel="stylesheet" type="text/css">
	<link href="/stylesheets/customer.css" media="screen, projection" rel="stylesheet" type="text/css">
	<!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
	<!-- <link href='http://fonts.googleapis.com/css?family=Nunito:400,300,700' rel='stylesheet' type='text/css'> -->
	<link href='/stylesheets/font-nunito.css' rel='stylesheet' type='text/css'>
	<!-- <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script> -->
	<script src="/javascripts/jquery-1.7.2.min.js"></script>
	
  

</head>


<body>
	<div class="container">
		<div class="left-col">
			<div class="intrude-less">
			<header id="header" class="inner"><div class="profilepic">
	<img src="/images/profile.png" alt="Profile Picture" style="width: 160px;" />
	<!-- 
	<script src="/javascripts/md5.js"></script>
	<script type="text/javascript">
		$(function(){
			$('.profilepic').append("<img src='http://www.gravatar.com/avatar/" + MD5("guojianxiang@17yuea.com") + "?s=160' alt='Profile Picture' style='width: 160px;' />");
		});
	</script>
	 -->
</div>

<nav id="main-nav"><ul class="main">
    <li><a href="/">首页</a></li>
    <li><a href="/archives">文章</a></li>
    <li><a href="/tags">标签</a></li>
    <li><a href="/about">关于我</a></li>
</ul>
</nav>
<nav id="sub-nav">
	<div class="social">
		
			<a class="email" href="mailto:guojianxiang@17yuea.com" title="Email">Email</a>
		
		
		
		
		
		
		
		
		
		
		
		
		
		
    	
    	
    	<!--  -->
	</div>
	
</nav>
</header>				
			</div>
		</div>	
		<div class="mid-col">
			
				
			
			<div class="mid-col-container">
				<div id="content" class="inner"><?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[一个PHPer的博客]]></title>
  <link href="http://www.17yuea.com//atom.xml" rel="self"/>
  <link href="http://www.17yuea.com//"/>
  <updated>2015-09-07T00:16:25+08:00</updated>
  <id>http://www.17yuea.com//</id>
  <author>
    <name><![CDATA[Gavin Jx]]></name>
    <email><![CDATA[guojianxiang@17yuea.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[树莓派控制有源蜂鸣器]]></title>
    <link href="http://www.17yuea.com//%E6%A0%91%E8%8E%93%E6%B4%BE/2015/09/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E6%8E%A7%E5%88%B6%E6%9C%89%E6%BA%90%E8%9C%82%E9%B8%A3%E5%99%A8/"/>
    <updated>2015-09-06T23:17:00+08:00</updated>
    <id>http://www.17yuea.com//%E6%A0%91%E8%8E%93%E6%B4%BE/2015/09/06/树莓派控制有源蜂鸣器</id>
    <content type="html"><![CDATA[<blockquote><p>前几天淘的温湿度传感器和有源蜂鸣器今天终于到了，今晚10点半左右就整起来了.</p></blockquote>

<!--more-->


<p>大学里学的电路图早已忘的一干二净，听起来实现起来有点难度的样子.</p>

<p>5V有源蜂鸣器 电磁式（SOT塑封管 长声 ）属性：</p>

<table>
<thead>
<tr>
<th>名称</th>
<th>属性</th>
</tr>
</thead>
<tbody>
<tr>
<td>电压</td>
<td> 3.5—5.5V</td>
</tr>
<tr>
<td>电流</td>
<td>  &lt;25mA</td>
</tr>
<tr>
<td>频率</td>
<td>  2300±500</td>
</tr>
</tbody>
</table>


<p>关于有源蜂鸣器和无源蜂鸣器的区别：</p>

<blockquote><p>无源蜂鸣器：</p>

<ol>
<li><p>无源内部不带震荡源，所以如果用直流信号无法令其鸣叫，必须用2K~5K的方波去驱动它.</p></li>
<li><p>声音频率可控，可以做出“多来米发索拉西”的效果.</p></li>
<li><p>在一些特例中，可以和LED复用一个控制口.</p></li>
</ol>


<p>有源蜂鸣器：</p>

<ol>
<li><p>有源蜂鸣器内部带震荡源，所以只要一通电就会叫.</p></li>
<li><p>程序控制方便，单片机一个高低电平就可以让其发出声音，而无源蜂鸣器却做不到.</p></li>
</ol>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP调试工具-Xdebug]]></title>
    <link href="http://www.17yuea.com//php/2015/09/06/PHP%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7Xdebug/"/>
    <updated>2015-09-06T23:00:00+08:00</updated>
    <id>http://www.17yuea.com//php/2015/09/06/PHP调试工具Xdebug</id>
    <content type="html"><![CDATA[<blockquote><p>刚刚过完了三天的小长假，假期没事的时候整理了一下Xdebug的使用.</p></blockquote>

<!--more-->


<p>等待更新&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP调试工具-Strace]]></title>
    <link href="http://www.17yuea.com//php/2015/09/06/PHP%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7Strace/"/>
    <updated>2015-09-06T13:35:00+08:00</updated>
    <id>http://www.17yuea.com//php/2015/09/06/PHP调试工具Strace</id>
    <content type="html"><![CDATA[<blockquote><p>昨天的时候，刚好看了下php调试方面的东西，正好看到了Strace，没想到今天就用上了.</p></blockquote>

<!--more-->


<p>今天，补单程序突然出现bug，有两笔订单掉单了却没有补单成功.</p>

<ul>
<li>首先，查了下 补单脚本</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ps -ef<span class="p">|</span>grep Patch
</span><span class='line'>xx      <span class="m">32687</span>  <span class="m">3224</span>  <span class="m">0</span> Aug20 ?        00:00:48 ...
</span></code></pre></td></tr></table></div></figure>


<p>补单脚本是守护进程控制的，但是看到这个时间点 <code>Aug20</code>，说明8.20日之后，脚本没有自动关闭，一直在执行. 所以就想看看是什么原因导致了脚本一直执行而没有退出.</p>

<ul>
<li>使用 <code>Strace</code> 命令</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>strace -p 32687
</span><span class='line'>
</span><span class='line'>restart_syscall<span class="o">(</span>&lt;... resuming interrupted call ...&gt;<span class="o">)</span> <span class="o">=</span> 0
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 1000<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 1000<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 1000<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 1000<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 0<span class="o">)</span> <span class="o">=</span> <span class="m">0</span> <span class="o">(</span>Timeout<span class="o">)</span>
</span><span class='line'>poll<span class="o">([{</span><span class="nv">fd</span><span class="o">=</span>5, <span class="nv">events</span><span class="o">=</span>POLLIN<span class="p">|</span>POLLPRI<span class="p">|</span>POLLRDNORM<span class="p">|</span>POLLRDBAND<span class="o">}]</span>, 1, 1000^C &lt;unfinished ...&gt;
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，程序一直卡在curl超时上，然后检查了下补单相关的 curl 操作，发现大多数的 curl 没有加入连接超时时间，当DNS出现问题时，一直在等待服务器的回应，导致脚本调用的时候卡死.</p>

<p>总结一下：Strace 还有很多用法，比如查看一段时间内调用系统函数最多的统计等等，<code>strace -p 进程ID</code> 是查看该进程的系统函数调用情况，对于异步脚本很有用！ 很多strace的用法以后会再更新~</p>

<h2><br></h2>

<p>参考资料：</p>

<ol>
<li><a href="http://www.dewen.io/q/17309/php+curl%E8%B0%83%E7%94%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%8D%A1%E6%AD%BB%EF%BC%8Cstrace%E7%BB%93%E6%9E%9C%E5%A6%82%E5%86%85">php curl调用的时候卡死，strace结果如内</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 HttpStatus 200（From Cache）和 304（Not Modified）的探索]]></title>
    <link href="http://www.17yuea.com//web/2015/09/01/%E5%85%B3%E4%BA%8E%20HttpStatus%20200%EF%BC%88From%20Cache%EF%BC%89%E5%92%8C%20304%EF%BC%88Not%20Modified%EF%BC%89%E7%9A%84%E6%8E%A2%E7%B4%A2/"/>
    <updated>2015-09-01T23:00:00+08:00</updated>
    <id>http://www.17yuea.com//web/2015/09/01/关于 HttpStatus 200（From Cache）和 304（Not Modified）的探索</id>
    <content type="html"><![CDATA[<p>今晚走了很长时间的弯路，最后发现问题在于 <strong>url load 访问</strong> 和 <strong>Command+R</strong> 刷新上，道路曲折但是很有意思。</p>

<blockquote><p>问题的起源在于晚上把一个demo部署到阿里云上，在配置nginx的时候，设置了expire。但是当用Chrome检查Network的时候，发现已经设置了expire的css，js，image 总是返回304（Not Modified）的状态。因为之前服务器缓存资源出现返回304的问题，所以就打算看下到底是什么问题</p></blockquote>

<!-- more -->


<p>首先，我断定自己的expire是没有设置错的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">location</span> <span class="p">~</span> <span class="sr">.*.(css|js)$</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">expires</span> <span class="s">30d</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">break</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>于是开始查看是否是ETag的配置问题？</p>

<ul>
<li>弯路1：nginx自从1.3版本后默认带有etag，木有发现，然后去github下载第三方ETag插件编译。。。 1.3版本后可以通过设置 etag on|off实现 etag 的配置，并且默认开启etag.</li>
</ul>


<p>Web服务器我们以nginx为例，以css文件为例，ETag可以理解为一个文件的标记，是唯一的.</p>

<p>ETag的工作原理是：</p>

<ul>
<li>第一次访问， nginx会返回ETag值，浏览器会记录下来</li>
</ul>


<p>Request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Accept:text/css,*/*;q=0.1</span>
</span><span class='line'><span class="err">Accept-Encoding:gzip, deflate, sdch</span>
</span><span class='line'><span class="err">Accept-Language:zh-CN,zh;q=0.8,en;q=0.6</span>
</span><span class='line'><span class="err">Cache-Control:no-cache</span>
</span><span class='line'><span class="err">Connection:keep-alive</span>
</span><span class='line'><span class="err">Host:123.57.161.203:81</span>
</span><span class='line'><span class="err">Pragma:no-cache</span>
</span><span class='line'><span class="err">Referer:http://123.57.161.203:81/</span>
</span><span class='line'><span class="err">User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.6 Safari/537.36</span>
</span><span class='line'><span class="err">X-FirePHP-Version:0.0.6</span>
</span></code></pre></td></tr></table></div></figure>


<p>Response</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Status Code:200 OK</span>
</span><span class='line'>
</span><span class='line'><span class="err">Accept-Ranges:bytes</span>
</span><span class='line'><span class="err">Cache-Control:max-age=2592000</span>
</span><span class='line'><span class="err">Connection:keep-alive</span>
</span><span class='line'><span class="err">Content-Length:32628</span>
</span><span class='line'><span class="err">Content-Type:text/css</span>
</span><span class='line'><span class="err">Date:Tue, 01 Sep 2015 14:06:27 GMT</span>
</span><span class='line'><span class="err">ETag:&quot;55e57588-7f74&quot;</span>
</span><span class='line'><span class="err">Expires:Thu, 01 Oct 2015 14:06:27 GMT</span>
</span><span class='line'><span class="err">Last-Modified:Tue, 01 Sep 2015 09:53:12 GMT</span>
</span><span class='line'><span class="err">Server:nginx/1.8.0</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第二次访问时，浏览器会带着上次nginx返回的ETag值作为If-None-Match的值，发起请求，这时候nginx会把If-None-Match值与该页面对应的ETag值进行比较，如果不相等则返回200，重新下载资源；如果二者相等，则返回304，浏览器调用本地缓存。</li>
</ul>


<p>Request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Accept:text/css,*/*;q=0.1</span>
</span><span class='line'><span class="err">Accept-Encoding:gzip, deflate, sdch</span>
</span><span class='line'><span class="err">Accept-Language:zh-CN,zh;q=0.8,en;q=0.6</span>
</span><span class='line'><span class="err">Cache-Control:max-age=0</span>
</span><span class='line'><span class="err">Connection:keep-alive</span>
</span><span class='line'><span class="err">Host:123.57.161.203:81</span>
</span><span class='line'><span class="err">If-Modified-Since:Tue, 01 Sep 2015 09:53:12 GMT</span>
</span><span class='line'><span class="err">If-None-Match:&quot;55e57588-7f74&quot;</span>
</span><span class='line'><span class="err">Referer:http://123.57.161.203:81/</span>
</span><span class='line'><span class="err">User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.6 Safari/537.36</span>
</span><span class='line'><span class="err">X-FirePHP-Version:0.0.6</span>
</span></code></pre></td></tr></table></div></figure>


<p>Response</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Status Code:304 Not Modified</span>
</span><span class='line'>
</span><span class='line'><span class="err">Cache-Control:max-age=2592000</span>
</span><span class='line'><span class="err">Connection:keep-alive</span>
</span><span class='line'><span class="err">Date:Tue, 01 Sep 2015 14:10:08 GMT</span>
</span><span class='line'><span class="err">ETag:&quot;55e57588-7f74&quot;</span>
</span><span class='line'><span class="err">Expires:Thu, 01 Oct 2015 14:10:08 GMT</span>
</span><span class='line'><span class="err">Last-Modified:Tue, 01 Sep 2015 09:53:12 GMT</span>
</span><span class='line'><span class="err">Server:nginx/1.8.0</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>但是比较纳闷的是为什么本地有缓存了，设置expire也成功了，浏览器不直接读取cache内容而是先去web服务器请求了一次？</strong></p>

<p>正常的 from cache 的 Request（应该说没有发起请求） 和 Response 应该是这样的：</p>

<p>Request</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">   -</span>
</span></code></pre></td></tr></table></div></figure>


<p>Response</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='http'><span class='line'><span class="err">Status Code:200 OK (from cache)</span>
</span><span class='line'>
</span><span class='line'><span class="err">Accept-Ranges:bytes</span>
</span><span class='line'><span class="err">Cache-Control:max-age=2592000</span>
</span><span class='line'><span class="err">Content-Length:32628</span>
</span><span class='line'><span class="err">Content-Type:text/css</span>
</span><span class='line'><span class="err">Date:Tue, 01 Sep 2015 14:12:56 GMT</span>
</span><span class='line'><span class="err">ETag:&quot;55e57588-7f74&quot;</span>
</span><span class='line'><span class="err">Expires:Thu, 01 Oct 2015 14:12:56 GMT</span>
</span><span class='line'><span class="err">Last-Modified:Tue, 01 Sep 2015 09:53:12 GMT</span>
</span><span class='line'><span class="err">Server:nginx/1.8.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>后来看到知乎的一个问题 <a href="http://www.zhihu.com/question/28725359">阿里云存储如何让浏览器始终以200 (from cache)缓存图片</a>，里面有一句话：</p>

<blockquote><p>通过大家的回答和我自己的实验发现（Chrome上），对于阿里云的云存储，加大Cache-Control的max-age是有效的，这点我之前也试过，但是像 @yuanyuanVivian说的，是在输入URL按下回车时有效，直接刷新时图片还是无法直接加载缓存，而且无法禁用阿里云存储Etag.</p></blockquote>

<p>受到启发，终于找到问题所在了：</p>

<ul>
<li>弯路2：URL回车或者链接访问URL 与 刷新或者强制刷新（mac下的Command+R，win下的F5，Ctrl+F5等）这两种方式浏览器的处理方式是不一样的：前者操作方式，浏览器获取资源的时候不会设置 <strong>Cache-Control:max-age=0</strong>，所以如果expire设置的max-age如果仍有效的话会优先从本地cache中获取；但是后者发起Request的时候浏览器给 header 里设置的 <strong>Cache-Control:max-age=0</strong>，可以参照上文第2次访问请求。我们都知道一旦max-age为0，则不会从本地cache获取数据了，所以会发起一次http请求，nginx根据header里传来的<strong>If-Modified-Since</strong>或者<strong>If-None-Match</strong>分别与<strong>Last-Modified</strong>，<strong>Etag</strong>做对比，从而做出返回304还是200的选择，而强制刷新是将 hreader 设置为 <strong>Cache-Control:no-cache</strong>，直接返回200，下载资源.</li>
</ul>


<p>所以说 设置的 expire 是生效的。正常情况用户点链接的话，属于加载，不属于刷新，缓存的静态资源肯定会优先从本地cache获取，但是刷新的时候就避免不了一次http请求获取304了。</p>

<h2><br></h2>

<p><strong>Expire 和 ETag 都有缓存的作用，但是区别在于：</strong></p>

<ol>
<li><p>Expire 第二次访问的时候会直接从 本地cache获取，即 200（From Cache），ETag会发起一次http请求，最后返回304（Not Modified）</p></li>
<li><p>分布的问题：因为Expire第二次访问不会发起http请求，所以不存在前后资源访问不在同一台机器上的问题；但是由于每台机器在某一个时刻针对某一个资源生成ETag的值不一样，将会导致如果第二次请求分配到了另外的机器，If-None-Match与另外的服务器ETag值不对应，则重新下载资源，导致本地缓存失效！</p></li>
</ol>


<p>所以在有多台web服务器的情况下要优先使用Expire.</p>

<p>具体nginx对Expire和Etag使用优先级是什么？这个只能阅读源码，以后探索了</p>

<p>参考资料：</p>

<ol>
<li><a href="http://nginx.org/en/docs/http/ngx_http_core_module.html#etag">Module ngx_http_core_module</a></li>
<li><a href="http://blog.csdn.net/21aspnet/article/details/6604789">HTTP头信息中的参数Etag</a></li>
<li><a href="http://www.bokeyy.com/post/200-ok-from-cache-vs-304-not-modified.html">200 OK (FROM CACHE) 与 304 NOT MODIFIED</a></li>
<li><a href="http://www.zhihu.com/question/28725359">阿里云存储如何让浏览器始终以200 (from cache)缓存图片？</a></li>
<li><a href="https://developer.yahoo.com/performance/rules.html">Best Practices for Speeding Up Your Web Site</a></li>
<li><a href="http://stackoverflow.com/questions/1665082/http-status-code-200-cache-vs-status-code-304">HTTP status code 200 (cache) vs status code 304?</a></li>
<li><a href="http://www-jo.se/f.pfleger/firefox-reload">Reload vs. Refresh in Firefox (Cache-Control)</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://www.17yuea.com//2015/05/30/HelloWorld/"/>
    <updated>2015-05-30T18:49:00+08:00</updated>
    <id>http://www.17yuea.com//2015/05/30/HelloWorld</id>
    <content type="html"><![CDATA[<p>Hi, This is the first page!</p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="s1">&#39;Hello World!&#39;</span> <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
</div>
			</div>
			<footer id="footer" class="inner">Copyright &copy; 2015

    Gavin Jx

</footer>
		</div>
	</div>
	










</body>
</html>
